import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 * @author Heeji Kim.8470 revised on Feb 28
 */
public final class RSSAggregator_version2 {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator_version2() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     * <html>
     * <head>
     * <title>the channel tag title as the page title</title>
     * </head>
     * <body>
     *  <h1>the page title inside a link to the <channel> link</h1>
     *  <p>the channel description</p>
     *  <table border="1">
     *   <tr>
     *    <th>Date</th>
     *    <th>Source</th>
     *    <th>News</th>
     *   </tr>
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /** Format of HTML and print out
         * Generate necessasry variables
         */
        out.println("<html>");
        out.println("<head>");

        //If title is available, print out the title
        if (channel.child(getChildElement(channel, "title")).numberOfChildren() > 0) {
            out.println(
                    "<title>" + channel.child(getChildElement(channel, "title"))
                    .child(0).label() + "</title>");
        }
        else {
            out.println("<title>Empty Title</title>");
        }
        out.println("</head>");

        //link with the title
        out.println("<h1>");
        out.println("<a href =\""
                    + channel.child(getChildElement(channel, "link"))
                    .child(0).label() + "\">"
                    + channel.child(getChildElement(channel, "title"))
                    .child(0).label() + "</a>");
        out.println("</h1>");

        //If description is available, print it out
        if (channel.child(getChildElement(channel, "description"))
                .numberOfChildren() > 0) {
            out.println(
                    "<p>" + channel.child(getChildElement(channel, "description"))
                    .child(0).label() + "</p>");
        }
        else {
            out.println("<p>No Description</p>");
        }
        //Print out border & titles of the table
        out.println("<table border = \"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file.
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //Closing Section
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int i = xml.numberOfChildren();
        int index = -1;

        while (i > 0 && index < 0) {
            i--;
            if (xml.child(i).label().equals(tag)) {
                index = i;
            }
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires
     * [the label of the root of item is an <item> tag] and out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");

        //Declare initial date & source & title & description
        int i = 0;

        String date = "No date";
        String source = "No source";
        String link = "";
        String sourceLink = "";
        String title = "No title";
        String description = "No description";

        int indexDate = getChildElement(item, "pubDate");
        int indexSource = getChildElement(item, "source");
        int indexTitle = getChildElement(item, "title");
        int indexDescription = getChildElement(item, "description");
        int indexLink = getChildElement(item, "link");

        while (i < item.numberOfChildren()) {

            //Publication Date
            if (indexDate != -1) {
                if (item.child(indexDate).numberOfChildren() != 0) {
                    date = item.child(indexDate).child(0).label();
                }
                date = item.child(i).child(0).label(); //should I revise it?
        }
            //Source
            //If source has a link, get the link and print out
            //Else, just get the source only.
            if (indexSource != -1) {
                source = item.child(indexSource).child(0).label();
                sourceLink = item.child(indexSource).attributeValue("url");
            }

            //Title
                //If title has a link, get the link and print out
                //Else, just get the source only
            if (indexTitle != -1) {
                if (item.child(indexLink).numberOfChildren() != 0) {
                    link = item.child(indexLink).child(0).label();
                    //If SourceLink is empty
                    if (sourceLink.length() != 0) {
                        //Print out the table elements
                        out.println("<tr>\n" + "\t<td>" + date + "</td>\n"
                                + "\t<td>" + "<\t<a href=\"" + sourceLink + "\">"
                                + source + "</a>\n" + "</td>\n" + "\t<td>\n"
                                + "\t\t<a href =\"" + link + "\">" + title + "</a>\n"
                                + "\t</td>\n" + "</tr>");
                        }
                    else {
                        out.println("<tr>\n" + "\t<td>" + date + "</td>\n"
                                + "\t<td>" + source + "</td>\n" + "\t<td>\n"
                                + "\t\t<a href=\"" + link + "\">" + title + "</a>\n"
                                + "\t</td>\n" + "</tr>");
                    }
                }
                else {
                    if (sourceLink.length() != 0) {
                        out.println("<tr>\n" + "\t<td>" + date + "</td>\n"
                                + "\t<td>" + "\t<a href=\"" + sourceLink + "\">"
                                + source + "</a>\n" + "</td>\n" + "\t<td>\n" + title
                                + "\t</td>\n" + "</tr>");
                    }
                    else {
                        out.println("<tr>\n" + "\t<td>" + date + "</td>\n"
                        + "\t<td>" + source + "</td>\n" + "\t<td>\n" + title
                        + "\t</td>\n" + "</tr>");
                    }
                }
            }
            //Description
            //If description has a link, get the link
            //Else, just get the source only.
            if (item.child(indexDescription).numberOfChildren() != 0) {
                if (indexLink != -1) {
                    description =
                        "<a href = \"" + item.child(indexLink).child(0).label() + "\">"
                         + item.child(i).child(0).label() + "</a>";
                }
                else {
                    description = item.child(i).child(0).label();
            }

            i++;
            }
            out.println("<td>" + date + "</td>");
            out.println("<td>" + source + "</td>");
            out.println("<td>" + title + "</td>");
            out.println("</tr>");
        }
    }
    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
    */
    private static void processFeed(String url, String file, SimpleWriter out) {
        //Print out HTML page
        SimpleWriter fileout = new SimpleWriter1L(file);
        XMLTree xml = new XMLTree1(url);

        for (int i = 0; i < xml.numberOfChildren(); i++) {

            XMLTree feed = xml.child(i);
            XMLTree rss = new XMLTree1(feed.attributeValue("url"));
        }

        if (xml.label().equals("rss")) {
            //If the Version is 2.0
            if (xml.hasAttribute("version")) {
                if (xml.attributeValue("version").equals("2.0")) {
                    XMLTree channel = xml.child(0);
                    //Print out the header
                    outputHeader(channel, fileout);

                    for (int j = 0; j < channel.numberOfChildren(); j++) {
                        if (channel.child(j).label().equals("item")) {
                            //Print out the table
                            processItem(channel.child(j), fileout);
                        }
                    }
                    //Print out the Footer
                    outputFooter(fileout);
                }
                else {
                    out.println("The version of XMLTree is not 2.0,"
                            + "Please try another version");
                }
                }
            else {
                out.println("The XMLTree does not have Attribute.");
            }
        }
            else {
                out.println("The XMLTree does not have labels.");
            }
        }
    /**
     * Main method.
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        //Ask the user to type the URL
        out.println("Please enter the feeds xml url: ");
        String url = in.nextLine();
        XMLTree xml = new XMLTree1(url);

        //Ask the user to type the name of the file
        out.println("Please enter the name of the file: ");
        String fileName = in.nextLine();

        SimpleWriter fileout = new SimpleWriter1L(fileName);

        //Check for valid RSS
        for (int a = 0; a < xml.numberOfChildren(); a++) {
            out.println(xml.child(1).child(1)
                    .child(0).child(0).attributeValue("a href"));
            processFeed(url, fileName, out);
        }
        //Print out the title name of XMLTree
        String title = xml.attributeValue("title");
        //Print out the file name that is with HTML pages, with 4 HTMLs.
        fileout.println("<html>\n<head>\n<title>\n" + title + "</title>\n"
                + "</head>\n<body>\n" + "<h2>\n" + title + "</h2>\n"
                + "<ul>\n");

        for (int b = 0; b < xml.numberOfChildren(); b++) {
            String name = xml.child(b).attributeValue("name");
            String filename = xml.child(b).attributeValue("file");
            fileout.println("<li>" + "<a href=\"" + filename + "\">" + name
            + "</a>" + "</li>\n");
        }
            fileout.println("</ul>\n </body>\n </html>");

        //Done
        in.close();
        out.close();
        fileout.close();
    }
}