import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 * 
 * @author Heeji Kim.8470
 * 
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     * 
     * <html>
     * <head>
     * <title>the channel tag title as the page title</title>
     * </head>
     * <body>
     *  <h1>the page title inside a link to the <channel> link</h1>
     *  <p>the channel description</p>
     *  <table border="1">
     *   <tr>
     *    <th>Date</th>
     *    <th>Source</th>
     *    <th>News</th>
     *   </tr>
     * 
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /** Format of HTML and print out
         * Generate necessasry variables
         */
        out.println("<html>");
        out.println("<head>");
        
        int indexTitle = getChildElement(channel, "title");
        int indexLink = getChildElement(channel, "link");
        int indexDescription = getChildElement(channel, "description");
        
        // If the title is not empty
        if (channel.child(indexTitle).numberOfChildren() != 0) {
            out.println("<title>"
                    + channel.child(indexTitle).child(0).label() + "</title>");
            out.println("</head>");
            out.println("<body>");
            out.println("<h1><a href=\""
                    + channel.child(indexLink).child(0).label() + "\">"
                    + channel.child(indexTitle).child(0).label() + "</a><h1>");
        }
        //If the title is empty
        else {
            out.println("<title> Empty title </title>");
            out.println("</head> <body>");
            out.println("<h1><a href = " + "\" "
            + channel.child(indexLink).child(0).label() + "\" />"
            + "Empty Title" + "</h1>");
        }
        
        //Opening Section
        out.println("<p>");
        
        if (channel.child(indexDescription).numberOfChildren() != 0) {
            out.println(channel.child(indexDescription).child(0).label());
            out.println("</p>");
        }
        else {
            out.println("<p>No Description</p>");
        }
        
        //Border and Titles of the table -> print out
        out.println("<table border = \"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
        
    }

    /**
     * Outputs the "closing" tags in the generated HTML file.  These are the
     * expected elements generated by this method:
     * 
     *  </table>
     * </body>
     * </html>
     * 
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //Closing Section
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     * 
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int i = xml.numberOfChildren();
        int index = -1;
        
        while (i > 0 && index < 0) {
            i--;
            if (xml.child(i).label().equals(tag)) {
                index = i;
            }
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     * 
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires
     * [the label of the root of item is an <item> tag] and out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        
        out.println("<tr>");
        
        int i = 0;
        
        int indexDate = getChildElement(item, "pubDate");
        int indexSource = getChildElement(item, "Souce");
        int indexTitle = getChildElement(item, "Title");
        int indexDescription = getChildElement(item, "Description");
        int indexLink = getChildElement(item, "Link");
        
        //Iterate using loop
        while (i < item.numberOfChildren()) {
            
            //Publication date
            if (indexDate != -1) {
                out.println("<td>" + item.child(indexDate).child(0).label()
                        + "</td>");
            }
            else {
                out.println("<td>No date available</td>");
            }
            
            //Source
            if (indexSource != -1) {
                //If the Source is available
                if (item.child(indexSource).numberOfChildren() != 0) {
                    out.println("<td><a href = \""
                            + item.child(indexSource).attributeValue("url") + "\">"
                            + item.child(indexSource).child(0).label()
                            + "</a></td>");
                }
                //If the source is availble but empty
                else {
                    out.println("<td><a href = \""
                            + item.child(indexSource).attributeValue("url") + "\""
                            + "</a></td>");
                }
            }
            //If the source is not availble
            else {
                out.println("<td>No source available</td>");
            }
            
            //Description && Link
            //If the link is available
            if (indexLink != -1) {
                //If the title is here and not empty
                if (indexTitle != -1 
                        && item.child(indexTitle).numberOfChildren() != 0) {
                    out.println("<td><a href = \""
                            + item.child(indexLink).child(0).label()
                            + item.child(indexTitle).child(0).label()
                            + "</a></td>");
                }
                //If the title not exist and description not empty
                else if (indexTitle != -1
                        && item.child(indexDescription).numberOfChildren() != 0) {
                    out.println("<td><a href = \""
                            + item.child(indexLink).child(0).label() + "\">"
                            + item.child(indexDescription).child(0).label()
                            + "</a></td>");
                }
                //If the title is here but empty && description exist not empty
                else if ((indexTitle != -1
                        && item.child(indexTitle).numberOfChildren() == 0)
                        && (indexDescription != -1
                        && item.child(indexDescription).numberOfChildren() != 0)) {
                    out.println("<td><a href = \""
                            + item.child(indexLink).child(0).label() + "\">"
                            + item.child(indexDescription).child(0).label() + "</a></td>");
                }
              //The link exists && title and description are either not exist or empty
                else {
                    out.println("<td><a href = = \""
                            + item.child(indexLink).child(0).label() + "\">"
                            + "No Title" + "</a></td>");
                }
                
            }
                //If the link is not provided (not available)
                else {
                  //If the title is here and not empty && no link
                    if (indexTitle != -1
                            && item.child(indexTitle).numberOfChildren() != 0) {
                        out.println("<td>" + item.child(indexTitle).child(0).label()
                                + "</td>");
                    }
                    //If the title is not here and Description is not empty
                    else if (indexTitle == -1
                            && item.child(indexDescription).numberOfChildren() != 0) {
                        out.println("<td>" + item.child(indexDescription).child(0).label()
                                + "</td>");
                    }
                    
                    //If the title is here but empty && Description exist and not empty
                    else if ((indexTitle != -1
                            && item.child(indexTitle).numberOfChildren() == 0)
                            && (indexDescription != -1
                            && item.child(indexDescription).numberOfChildren() != 0)) {
                        out.println("<td>" + item.child(indexDescription).child(0).label()
                                + "</td>");
                    }
                    //None exist
                    else {
                        out.println("<td>No title available</td>");
                    }
                    
                }
            }
            out.println("</tr>");
        }
        
        

        
    

    /**
     * Main method.
     * 
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        //Ask the user to type the URL
        out.println("Please enter the URL of an RSS 2.0 news feed: ");
        String url = in.nextLine();
        
        XMLTree xml = new XMLTree1(url);
        
        //Ask the user to type the name of the file
        out.println("Please enter the name of the file");
        String fileName = in.nextLine();
        fileName = fileName + " .html";
        
        
        //Print out the header section with HTML format
        XMLTree channel = xml.child(0);
        outputHeader(channel, out);
        
        
        //Print out all items with HTML format
        int x = 0;
        while (x < channel.numberOfChildren()) {
            if (channel.child(x).label().equals("item")) {
                processItem(channel.child(x), out);
            }
            x++;
        }
        
        //Print out the closing section with HTML format'
        outputFooter(out);

        //Done
        in.close();
        out.close();
    }

}